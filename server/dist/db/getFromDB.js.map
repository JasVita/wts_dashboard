{"version":3,"file":"getFromDB.js","sourceRoot":"","sources":["../../db/getFromDB.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAE/C;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa;IACjC,MAAM,KAAK,GAAG;;;;GAIb,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,mBAAmB;IACvC,MAAM,KAAK,GAAG;;;;;;;;GAQb,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW;IAC/B,MAAM,KAAK,GAAG;;;;;;;;;;;;;;GAcb,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,KAAa;IACnD,MAAM,KAAK,GAAG;;;;;GAKb,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAClD,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB;IACzC,wEAAwE;IACxE,MAAM,KAAK,GAAG;;;;GAIb,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,YAAY,IAAI,CAAC,CAAC;AAC3C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B;IAC9C,gDAAgD;IAChD,MAAM,KAAK,GAAG;;;;GAIb,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,YAAY,IAAI,CAAC,CAAC;AAC3C,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY;IAChC,MAAM,KAAK,GAAG;;;;GAIb,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,MAAM,KAAK,GAAG;;;;GAIb,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC","sourcesContent":["import { executeQuery } from './connection.js';\r\n\r\n/**\r\n * 1) List all tables (already done)\r\n */\r\nexport async function listAllTables() {\r\n  const query = `\r\n    SELECT tablename\r\n    FROM pg_catalog.pg_tables\r\n    WHERE schemaname NOT IN ('pg_catalog', 'information_schema');\r\n  `;\r\n  const result = await executeQuery(query);\r\n  return result.rows; \r\n}\r\n\r\n/**\r\n * List attributes (column names) and data types for each table in the public schema.\r\n */\r\nexport async function listAllTableColumns() {\r\n  const query = `\r\n    SELECT \r\n      table_name,\r\n      column_name,\r\n      data_type\r\n    FROM information_schema.columns\r\n    WHERE table_schema = 'public'\r\n    ORDER BY table_name, ordinal_position;\r\n  `;\r\n  const result = await executeQuery(query);\r\n  return result.rows;\r\n}\r\n\r\n/**\r\n * 2) Fetch all chats from \"customerlist\".\r\n *    Possibly also join \"daily_message\" if you need the last message.\r\n */\r\nexport async function getAllChats() {\r\n  const query = `\r\n    SELECT c.wa_id,\r\n           c.name,\r\n           c.is_ai,\r\n           c.is_important,\r\n           (\r\n             SELECT dm.message_content\r\n             FROM daily_message dm\r\n             WHERE dm.wa_id = c.wa_id\r\n             ORDER BY dm.input_time DESC\r\n             LIMIT 1\r\n           ) AS last_message\r\n    FROM customerlist c\r\n    ORDER BY c.name;\r\n  `;\r\n  const result = await executeQuery(query);\r\n  return result.rows;\r\n}\r\n\r\n/**\r\n * 3) Fetch messages from \"daily_message\"\r\n *    (For example, if you want to get all messages for a given wa_id)\r\n */\r\nexport async function getMessagesByWaId(wa_id: string) {\r\n  const query = `\r\n    SELECT *\r\n    FROM daily_message\r\n    WHERE wa_id = $1\r\n    ORDER BY input_time ASC;\r\n  `;\r\n  const result = await executeQuery(query, [wa_id]);\r\n  return result.rows;\r\n}\r\n\r\n/**\r\n * 4) Fetch analytics (active users, AI-handled, etc.)\r\n *    This is an example placeholder; you'll need to adapt your real queries.\r\n */\r\nexport async function getActiveUsersLast24H() {\r\n  // Example: Count distinct wa_id from daily_message in the last 24 hours\r\n  const query = `\r\n    SELECT COUNT(DISTINCT wa_id) AS active_users\r\n    FROM daily_message\r\n    WHERE input_time >= NOW() - INTERVAL '24 HOURS';\r\n  `;\r\n  const result = await executeQuery(query);\r\n  return result.rows[0]?.active_users || 0;\r\n}\r\n\r\nexport async function getBookedMeetingsLastMonth() {\r\n  // Example: from google_meets or a similar table\r\n  const query = `\r\n    SELECT COUNT(*) AS booked_count\r\n    FROM google_meets\r\n    WHERE scheduled_time >= NOW() - INTERVAL '1 MONTH';\r\n  `;\r\n  const result = await executeQuery(query);\r\n  return result.rows[0]?.booked_count || 0;\r\n}\r\n\r\n/**\r\n * 5) Fetch all labels from \"customer_label\".\r\n *    If your table structure is more complex (e.g. a separate 'label' table vs. a pivot),\r\n *    adapt as needed.\r\n */\r\nexport async function getAllLabels() {\r\n  const query = `\r\n    SELECT id, name, color\r\n    FROM customer_label\r\n    ORDER BY id;\r\n  `;\r\n  const result = await executeQuery(query);\r\n  return result.rows;\r\n}\r\n\r\n/**\r\n * 6) Possibly get all WAIDs by region from \"customerlist\"\r\n */\r\nexport async function getWaIdsByRegion() {\r\n  const query = `\r\n    SELECT region, COUNT(*) as amount\r\n    FROM customerlist\r\n    GROUP BY region;\r\n  `;\r\n  const result = await executeQuery(query);\r\n  return result.rows;\r\n}\r\n"]}