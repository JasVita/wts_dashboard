{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../db/connection.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,IAAI,CAAC;AACrB,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,MAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC;AAErB,MAAM,QAAQ,GAAG;IACf,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,WAAW;IACxC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,IAAI;IACzC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,UAAU;IAC3C,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,UAAU;IACvC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,EAAE;IACvC,GAAG,EAAE;QACH,OAAO,EAAE,IAAI;QACb,kBAAkB,EAAE,KAAK;KAC1B;CACF,CAAC;AAEF,6CAA6C;AAE7C,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;AAEvC,+CAA+C;AAC/C,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE;IACpC,IAAI,GAAG,EAAE,CAAC;QACR,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;IACzE,CAAC;SAAM,CAAC;QACN,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;QAC7D,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,KAAa,EAAE,SAAgB,EAAE;IAClE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;IACpC,IAAI,CAAC;QACH,OAAO,MAAM,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC3C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAG,KAAe,CAAC,OAAO,CAAC,CAAC;QACjE,MAAM,KAAK,CAAC;IACd,CAAC;YAAS,CAAC;QACT,MAAM,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;AACH,CAAC","sourcesContent":["import pkg from 'pg';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst { Pool } = pkg;\r\n\r\nconst dbConfig = {\r\n  host: process.env.DB_HOST || 'localhost',\r\n  port: Number(process.env.DB_PORT) || 5432,\r\n  database: process.env.DB_NAME || 'postgres',\r\n  user: process.env.DB_USER || 'postgres',\r\n  password: process.env.DB_PASSWORD || '',\r\n  ssl: {\r\n    require: true,\r\n    rejectUnauthorized: false,\r\n  },\r\n};\r\n\r\n// console.log('Database Config:', dbConfig);\r\n\r\nexport const pool = new Pool(dbConfig);\r\n\r\n// Log connection success or failure on startup\r\npool.connect((err, client, release) => {\r\n  if (err) {\r\n    console.error('Error connecting to PostgreSQL database:', err.message);\r\n  } else {\r\n    console.log('Successfully connected to PostgreSQL database');\r\n    release();\r\n  }\r\n});\r\n\r\n/**\r\n * Reusable function to execute SQL queries against our database\r\n */\r\nexport async function executeQuery(query: string, params: any[] = []) {\r\n  const client = await pool.connect();\r\n  try {\r\n    return await client.query(query, params);\r\n  } catch (error) {\r\n    console.error('Database Query Error:', (error as Error).message);\r\n    throw error;\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n"]}