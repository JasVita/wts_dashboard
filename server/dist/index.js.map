{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":"AAAA,2DAA2D;AAC3D,uCAAuC;AAEvC,mFAAmF;AACnF,mEAAmE;AACnE,4DAA4D;AAC5D,0CAA0C;AAE1C,gEAAgE;AAChE,gEAAgE;AAChE,sDAAsD;AACtD,0DAA0D;AAC1D,8DAA8D;AAC9D,2CAA2C;AAC3C,OAAO,oBAAoB,CAAC,CAAC,qCAAqC;AAClE,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC,CAAC,0BAA0B;AAC7E,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,aAAa,EAAE,MAAM,KAAK,CAAC;AAEpC,OAAO,OAAO,MAAM,SAAS,CAAC;AAC9B,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,YAAY,EAAE,MAAM,MAAM,CAAC;AAEpC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;AAChB,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAClD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAE3C,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AAEtB,cAAc;AACd,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;IACX,MAAM,EAAE,GAAG;IACX,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC;IACnC,WAAW,EAAE,IAAI;CAClB,CAAC,CAAC,CAAC;AAEJ,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AAExB,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;AACpD,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;AAElC,yBAAyB;AACzB,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,GAAG,CAAC,IAAI,CAAC;QACP,MAAM,EAAE,IAAI;QACZ,OAAO,EAAE,gEAAgE;KAC1E,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;AAEjC,MAAM,IAAI,GAAG,IAAI,CAAC;AAElB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;IAC7B,OAAO,CAAC,GAAG,CAAC,mCAAmC,IAAI,EAAE,CAAC,CAAC;IAEvD,2DAA2D;IAC3D,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,aAAa,EAAE,CAAC;QACrC,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC;QAChD,wFAAwF;IAC1F,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAAC;IACzD,CAAC;AACH,CAAC,CAAC,CAAC;AACH,mCAAmC;AACnC,8CAA8C;AAC9C,wCAAwC;AACxC,mCAAmC;AACnC,qCAAqC;AACrC,oCAAoC;AAEpC,2CAA2C;AAC3C,gCAAgC;AAChC,qDAAqD;AACrD,MAAM;AAGN,+CAA+C;AAE/C,oDAAoD;AACpD,mCAAmC;AACnC,wDAAwD;AACxD,oCAAoC;AACpC,+DAA+D;AAC/D,MAAM;AACN,8CAA8C;AAC9C,oDAAoD;AACpD,MAAM","sourcesContent":["// If you have a config/env file for environment variables:\n/// import { env } from './config/env';\n\n// If your db/connection.ts automatically logs \"Successfully connected\" on success,\n// there's no need to import anything else to test the connection. \n// But you could import if you want to do test queries here:\n// import { pool } from './db/connection';\n\n// import { customerStatsRouter } from './routes/customerStats';\n// import { customerChatsRouter } from './routes/customerChats';\n// import { messagesRouter } from './routes/messages';\n// import { chatStatusRouter } from './routes/chatStatus';\n// import { pushHumanRouter } from './routes/pushHumanRouter';\n// import { initSocketIO } from './socket';\nimport './db/connection.js'; // ensures DB connection is initiated\nimport { listAllTables } from './db/getFromDB.js'; // <-- IMPORT OUR FUNCTION\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nimport express from 'express';\nimport cors from 'cors';\nimport { createServer } from 'http';\n\nimport.meta.url;\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\n\n// Enable CORS\napp.use(cors({\n  origin: '*',\n  methods: ['GET', 'POST', 'OPTIONS'],\n  credentials: true,\n}));\n\napp.use(express.json());\n\nconst distPath = path.join(__dirname, '../../dist');\napp.use(express.static(distPath));\n\n// Optional test endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'ok',\n    message: 'Server is running, DB should log connection status in console.',\n  });\n});\n\nconst server = createServer(app);\n\nconst PORT = 5000;\n\nserver.listen(PORT, async () => {\n  console.log(`[Index]: Server running on port ${PORT}`);\n\n  // === Call listAllTables on startup and log the result ===\n  try {\n    const tables = await listAllTables();\n    console.log('[Index]: Tables in DB =>', tables);\n    // tables is an array of objects, e.g. [{ tablename: 'users' }, { tablename: 'orders' }]\n  } catch (err) {\n    console.error('[Index]: Error listing tables =>', err);\n  }\n});\n// ===== COMMENTED OUT ROUTES =====\n// app.use('/api/stats', customerStatsRouter);\n// app.use('/api', customerChatsRouter);\n// app.use('/api', messagesRouter);\n// app.use('/api', chatStatusRouter);\n// app.use('/api', pushHumanRouter);\n\n// Comment out fallback route if not needed\n// app.get('*', (_req, res) => {\n//   res.sendFile(path.join(distPath, 'index.html'));\n// });\n\n\n// console.log('[Server] HTTP server created');\n\n// If youâ€™re using Socket.IO, comment it out for now\n// const io = initSocketIO(server);\n// console.log('[Server] Socket.IO server initialized');\n// io.on('connection', (socket) => {\n//   console.log('New Socket.IO client connected:', socket.id);\n// });\n// io.engine.on('connection_error', (err) => {\n//   console.log('[Socket] Connection error:', err);\n// });\n"]}