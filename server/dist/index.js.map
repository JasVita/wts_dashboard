{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":"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","sourcesContent":["// If you have a config/env file for environment variables:\r\n/// import { env } from './config/env';\r\n\r\n// If your db/connection.ts automatically logs \"Successfully connected\" on success,\r\n// there's no need to import anything else to test the connection. \r\n// But you could import if you want to do test queries here:\r\n// import { pool } from './db/connection';\r\n\r\n// import { customerStatsRouter } from './routes/customerStats';\r\n// import { customerChatsRouter } from './routes/customerChats';\r\n// import { messagesRouter } from './routes/messages';\r\n// import { chatStatusRouter } from './routes/chatStatus';\r\n// import { pushHumanRouter } from './routes/pushHumanRouter';\r\n// import { initSocketIO } from './socket';\r\nimport './db/connection.js'; // ensures DB connection is initiated\r\nimport { listAllTables, listAllTableColumns } from './db/getFromDB.js';\r\nimport path from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport { createServer } from 'http';\r\n\r\nimport.meta.url;\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\nconst app = express();\r\n\r\n// Enable CORS\r\napp.use(cors({\r\n  origin: '*',\r\n  methods: ['GET', 'POST', 'OPTIONS'],\r\n  credentials: true,\r\n}));\r\n\r\napp.use(express.json());\r\n\r\nconst distPath = path.join(__dirname, '../../dist');\r\napp.use(express.static(distPath));\r\n\r\n// Optional test endpoint\r\napp.get('/health', (req, res) => {\r\n  res.json({\r\n    status: 'ok',\r\n    message: 'Server is running, DB should log connection status in console.',\r\n  });\r\n});\r\n\r\nconst server = createServer(app);\r\n\r\nconst PORT = 5000;\r\n\r\nserver.listen(PORT, async () => {\r\n  console.log(`[Index]: Server running on port ${PORT}`);\r\n\r\n  // 1) List all table names\r\n  try {\r\n    const tables = await listAllTables();\r\n    console.log('[Index]: Tables in DB =>', tables);\r\n    // tables is an array of objects, e.g. [{ tablename: 'users' }, { tablename: 'orders' }]\r\n  } catch (err) {\r\n    console.error('[Index]: Error listing tables =>', err);\r\n  }\r\n\r\n  // 2) List columns and data types for each table in the public schema\r\n  try {\r\n    const columns = await listAllTableColumns();\r\n    console.log('[Index]: Table columns =>', columns);\r\n  } catch (err) {\r\n    console.error('[Index]: Error listing columns =>', err);\r\n  }\r\n\r\n});\r\n// ===== COMMENTED OUT ROUTES =====\r\n// app.use('/api/stats', customerStatsRouter);\r\n// app.use('/api', customerChatsRouter);\r\n// app.use('/api', messagesRouter);\r\n// app.use('/api', chatStatusRouter);\r\n// app.use('/api', pushHumanRouter);\r\n\r\n// Comment out fallback route if not needed\r\n// app.get('*', (_req, res) => {\r\n//   res.sendFile(path.join(distPath, 'index.html'));\r\n// });\r\n\r\n\r\n// console.log('[Server] HTTP server created');\r\n\r\n// If youâ€™re using Socket.IO, comment it out for now\r\n// const io = initSocketIO(server);\r\n// console.log('[Server] Socket.IO server initialized');\r\n// io.on('connection', (socket) => {\r\n//   console.log('New Socket.IO client connected:', socket.id);\r\n// });\r\n// io.engine.on('connection_error', (err) => {\r\n//   console.log('[Socket] Connection error:', err);\r\n// });\r\n"]}